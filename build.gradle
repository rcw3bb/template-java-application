import java.nio.file.Files
import java.nio.file.Paths
import java.util.stream.Collectors
import java.util.stream.Stream

plugins {
    id 'application'
    id "org.javamodularity.moduleplugin" version "1.8.10"
    id 'org.beryx.jlink' version '2.24.4'
}

group GROUP
version VERSION

sourceCompatibility = 1.17

application {
    mainModule = MAIN_MODULE
    mainClass = MAIN_CLASS
}

repositories {
    if (Boolean.valueOf(USE_PRIVATE_REPO)) {
        println "Using Private Repository"

        //Replace the following with your own repository.
        maven {
            url 'https://repo.ronella.xyz/artifactory/java-central'
            credentials {
                username "${artifactoryUsername}"
                password "${artifactoryPassword}"
            }
        }
    }
    else {
        println "Using mavenCentral Repository"
        mavenCentral()
    }
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j18-impl:2.17.1'

    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'xyz.ronella.casual:trivial-chunk:2.4.0'
    implementation 'xyz.ronella.logging:logger-plus:1.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    testImplementation 'org.mockito:mockito-core:4.3.1'
}

ext.packageName = "${project.name}-${version}"

test {
    useJUnitPlatform()
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    forceMerge('slf4j-api','log4j-api')
    imageName = packageName
}

processResources {
    def resources = ['xml', 'properties']
    doFirst {
        sourceSets.main.output.asList().stream()
                .filter{___file -> ___file.path.matches(".*java.?main\$")}
                .findFirst().ifPresent { ___file ->

            def sourceDir = sourceSets.main.resources.sourceDirectories.asPath
            def destinationDir = ___file.path

            copy {
                from(sourceDir) {
                    include resources.stream().map{ ___ext -> "**/*.${___ext}"}.collect(Collectors.toList())
                }
                into(destinationDir)
            }
        }
    }
    doLast {
        sourceSets.main.output.asList().stream()
                .filter{___file -> ___file.path.matches(".*resources.?main\$")}
                .findFirst().ifPresent { _1_file ->

            Stream<Path> stream = Files.walk(Paths.get(_1_file.path))
            try {
                def fileToDelete = stream.filter{___path -> Files.isRegularFile(___path) &&
                        resources.stream().any {___ext -> ___path.toFile().path.endsWith(___ext)}
                }.map{___path -> ___path.toFile()}
                        .collect(Collectors.toList()).toArray()

                if (fileToDelete.size()>0) {
                    delete {
                        delete fileToDelete
                    }
                }
            }
            finally {
                stream.close()
            }
        }
    }
}

task preparePackage(dependsOn: ['jlink']) {
    group = "build"
    doLast {
        def resourceDir = sourceSets.main.resources.sourceDirectories.asPath
        def jlinkOutputDir = Paths.get(buildDir.absolutePath, packageName)
        def jlinkOutputBinDir = Paths.get(jlinkOutputDir.toString(), 'bin')

        def jlinkOutputBinDirFile = jlinkOutputBinDir.toFile();
        if (!jlinkOutputBinDirFile.exists()) {
            jlinkOutputBinDirFile.mkdirs()
        }

        copy {
            from(resourceDir)
            into(jlinkOutputDir)
            include "*.bat"
        }

        copy {
            from(resourceDir)
            into(jlinkOutputBinDir)
            include "log4j2-release.xml"
            rename "log4j2-release.xml", "log4j2.xml"
        }

        def packageFile = Paths.get(jlinkOutputBinDir.toString(), "___package___").toFile();
        if (!packageFile.exists()) {
            packageFile.createNewFile();
        }
    }
}

task packWin(dependsOn: ['preparePackage']) {
    group = "build"
    doLast {
        def jlinkOutputDir = Paths.get(buildDir.absolutePath, packageName)
        def outputFile = Paths.get(buildDir.absolutePath, 'pack', "${packageName}-win64.zip")
        ant.zip(destfile: outputFile) {
            fileset(dir: jlinkOutputDir)
        }
    }
}