import java.nio.file.Paths
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'application'
    id "org.javamodularity.moduleplugin" version "1.8.12"
    id 'org.beryx.jlink' version '2.25.0'
}

group GROUP
version VERSION

sourceCompatibility = 1.17

application {
    mainModule = moduleName
    mainClass = MAIN_CLASS
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'

    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'xyz.ronella.casual:trivial-chunk:2.15.0'
    implementation 'xyz.ronella.logging:logger-plus:1.2.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    testImplementation 'org.mockito:mockito-core:4.3.1'
}

ext {
    packageName = "${project.name}-${version}"
    FILTER_TOKEN = ['project.name': project.name]
}

test {
    useJUnitPlatform()
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        moduleName = application.mainModule
        mainClassName = application.mainClass
        jvmArgs = ['-Dlog4j.configurationFile={{BIN_DIR}}\\conf\\log4j2.xml']
    }
    mergedModule {
        additive = true
        uses 'org.apache.logging.log4j.spi.Provider'
        uses 'org.apache.logging.log4j.message.ThreadDumpMessage.ThreadInfoFactory'
        uses 'org.apache.logging.log4j.core.util.ContextDataProvider'
        uses 'org.apache.logging.log4j.util.PropertySource'
        uses 'org.apache.logging.log4j.core.util.WatchEventService'
    }
    forceMerge('slf4j-api','log4j-api')
    imageName = packageName.toString()
}

processResources {
    filter(ReplaceTokens, tokens : FILTER_TOKEN)
}

task preparePackage(dependsOn: ['jlink']) {
    group = "build"
    doLast {
        def projectName = packageName.toString()
        def confDirectory = "conf"

        def batchFile = "${project.name}.bat"
        def batchPath = Paths.get(buildDir.absolutePath, projectName, batchFile).toFile()

        def jlinkTargetDir = Paths.get(buildDir.absolutePath, projectName)
        def jlinkBinDir = Paths.get(jlinkTargetDir.toString(), 'bin')
        def jlinkConfDir = Paths.get(jlinkBinDir.toFile().absolutePath, "..", confDirectory)

        def log4jFile = "log4j2.xml"
        def log4jPath = Paths.get(jlinkConfDir.toFile().absolutePath, log4jFile).toFile()

        def mainResources = sourceSets.main.resources.sourceDirectories.asPath

        copy {
            from(Paths.get(buildDir.absolutePath, projectName, "bin"))
            into(Paths.get(buildDir.absolutePath, projectName))
            include batchFile
        }

        copy {
            from(mainResources)
            into(jlinkConfDir)
            filter(ReplaceTokens, tokens : FILTER_TOKEN)
        }

        if (batchPath.exists()) {
            def pattern = "set DIR=\"%~dp0\""
            def replaceWith = "set DIR=\"%~dp0\\bin\""
            def content = batchPath.text
            def updatedContent = content.replace(pattern, replaceWith)
            if (content != updatedContent) {
                batchPath.write(updatedContent)
            }
        }

        if (log4jPath.exists()) {
            def pattern = "logs/"
            def replaceWith = "../${pattern}"
            def content = log4jPath.text
            def updatedContent = content.replace(pattern, replaceWith)
            if (content != updatedContent) {
                log4jPath.write(updatedContent)
            }
        }
    }
}

tasks.findByPath('jlink').finalizedBy(preparePackage)

task packWin(group: 'distribution', dependsOn: ['jlink']) {
    group = "build"
    doLast {
        def jlinkOutputDir = Paths.get(buildDir.absolutePath, packageName)
        def outputFile = Paths.get(buildDir.absolutePath, 'pack', "${packageName}-win64.zip")
        ant.zip(destfile: outputFile) {
            fileset(dir: jlinkOutputDir)
        }
    }
}