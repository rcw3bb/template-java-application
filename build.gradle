import xyz.ronella.trivial.handy.CommandLocator

import java.nio.file.Paths
import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat

buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }

    dependencies {
        classpath libs.trivial.chunk
    }
}

plugins {
    id 'application'
    id 'jacoco'
    id 'pmd'
    alias(libs.plugins.moduleplugin)
    alias(libs.plugins.jlink)
    alias(libs.plugins.shadow)
    //alias(libs.plugins.snyk)
}

group GROUP
version VERSION

configurations {
    mockitoAgent
    pmdTool
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    withJavadocJar()
    withSourcesJar()
}

application {
    mainModule = moduleName
    mainClass = MAIN_CLASS
}

shadowJar {
    archiveClassifier.set("fat")
    minimize {
        exclude(dependency('ch.qos.logback:.*:.*'))
    }
    dependsOn(test)
    //dependsOn('snyk-monitor')
}

repositories {
    mavenCentral()
}

dependencyLocking {
    lockAllConfigurations()
}

dependencies {
    implementation libs.bundles.logger
    implementation libs.commons.cli
    implementation libs.trivial.chunk

    testImplementation testLibs.bundles.unit.test
    mockitoAgent(testLibs.mockito.core) {
        transitive = false
    }

    pmdTool libs.pmd //This must be the only dependency attached to the pmdTool configuration.
}

ext {
    packageName = "${project.name}-${version}"
    FILTER_TOKEN = [
            'project.name': project.name
            ,'app.version' : version
            ,'build.date' : new SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSS').format(new Date())
    ]
}

test {
    jvmArgs("-javaagent:${configurations.mockitoAgent.asPath}")
    dependsOn(pmdMain)
    finalizedBy(jacocoTestReport)
    //finalizedBy('snyk-test')
    useJUnitPlatform()
}

jlink {
    options = ['--strip-debug', '--compress', 'zip-9', '--no-header-files', '--no-man-pages']
    launcher{
        moduleName = application.mainModule
        mainClassName = application.mainClass
        jvmArgs = ['-Dlogback.configurationFile={{BIN_DIR}}\\conf\\logback.xml']
    }
    imageName = packageName.toString()
}

processResources {
    filter(ReplaceTokens, tokens : FILTER_TOKEN)
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version
        )
    }
    dependsOn(test)
    //dependsOn('snyk-monitor')
    finalizedBy(javadocJar)
}

pmd {
    consoleOutput = true
    toolVersion = configurations.pmdTool.resolvedConfiguration.firstLevelModuleDependencies.moduleVersion.first
    rulesMinimumPriority = 5
    ruleSetFiles = files('quality/pmd/java/custom.xml')
    ruleSets = []
    logger.lifecycle("PMD version: ${pmd.toolVersion}")
}

pmdTest.enabled = false

/*snyk {
    arguments = '--all-sub-projects'
    severity = 'low'
    api = "${snykToken}"
    autoDownload = true
    autoUpdate = true
}*/

task preparePackage(dependsOn: ['jlink']) {
    group = "build"
    doLast {

        def confDirectory = "conf"
        def buildPath = layout.buildDirectory
        def projectPath = buildPath.dir(packageName)

        def batchFile = "${project.name}.bat"
        def batchPath = projectPath.map { it.file(batchFile) }.get().asFile

        def jlinkTargetDir = projectPath.get().asFile.toPath()
        def jlinkBinDir = Paths.get(jlinkTargetDir.toString(), 'bin')
        def jlinkConfDir = Paths.get(jlinkBinDir.toFile().absolutePath, "..", confDirectory)

        def logbackFile = "logback.xml"
        def logbackPath = Paths.get(jlinkConfDir.toFile().absolutePath, logbackFile).toFile()

        def mainResources = sourceSets.main.resources.sourceDirectories.asPath

        copy {
            from(projectPath.map { it.dir("bin") }.get().asFile.toPath())
            into(projectPath.get().asFile.toPath())
            include batchFile
        }

        copy {
            from(mainResources)
            into(jlinkConfDir)
            filter(ReplaceTokens, tokens : FILTER_TOKEN)
            exclude('app-info.properties')
        }

        if (batchPath.exists()) {
            def pattern = "set DIR=\"%~dp0\""
            def replaceWith = "set DIR=\"%~dp0\\bin\""
            def content = batchPath.text
            def updatedContent = content.replace(pattern, replaceWith)
            if (content != updatedContent) {
                batchPath.write(updatedContent)
            }
        }

        if (logbackPath.exists()) {
            def pattern = "logs/"
            def replaceWith = "../${pattern}"
            def content = logbackPath.text
            def updatedContent = content.replace(pattern, replaceWith)
            if (content != updatedContent) {
                logbackPath.write(updatedContent)
            }
        }
    }
}

tasks.findByPath('jlink').finalizedBy(preparePackage)

task packWin(group: 'distribution', dependsOn: ['jlink']) {
    doLast {
        def buildPath = layout.buildDirectory
        def jlinkOutputDir = buildPath.dir(packageName).get().asFile.toPath()
        def outputFile = buildPath.dir("pack").map {
            it.file("${packageName}-win64.zip")
        }.get().asFile.toPath()

        ant.zip(destfile: outputFile) {
            fileset(dir: jlinkOutputDir)
        }
    }
}

task packImage(group: 'distribution', dependsOn: ['buildExec']) {
    doLast {
        def buildPath = layout.buildDirectory
        def imageOutputDir = buildPath.dir("image").get().asFile.toPath()
        def outputFile = buildPath.dir("pack").map {
            it.file("${packageName}-image.zip")
        }.get().asFile.toPath()

        ant.zip(destfile: outputFile) {
            fileset(dir: imageOutputDir)
        }
    }
}

task buildExec(group: 'build', dependsOn: [shadowJar]) {
    def buildPath = layout.buildDirectory
    def imageDir = buildPath.dir("image").get().asFile

    doFirst {
        if (!imageDir.exists()) {
            imageDir.mkdirs()
        }
    }

    doLast {
        exec {
            def nativeExec = CommandLocator.locateAsString("native-image")
            def libsDir = buildPath.dir("libs").get().asFile.toPath().toFile().absolutePath
            def fatJar = Paths.get(libsDir, "${packageName}-fat.jar").toFile().absolutePath
            def outputFile = Paths.get(imageDir.absolutePath, "${project.name}").toFile().absolutePath
            commandLine nativeExec.get(), '--no-fallback', '-jar', fatJar, '-o', outputFile
        }
        copy {
            from(buildPath.dir("resources/main").get().asFile.toPath())
            into(Paths.get(imageDir.absolutePath, "conf"))
            include 'logback.xml'
        }
    }
}